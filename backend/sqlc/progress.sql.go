// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: progress.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const deleteProgress = `-- name: deleteProgress :exec
DELETE
FROM "users"."progress"
WHERE profile_id = $1::uuid
  AND episode_id = $2::int
`

type deleteProgressParams struct {
	Column1 uuid.UUID `db:"column_1" json:"column1"`
	Column2 int32     `db:"column_2" json:"column2"`
}

func (q *Queries) deleteProgress(ctx context.Context, arg deleteProgressParams) error {
	_, err := q.db.ExecContext(ctx, deleteProgress, arg.Column1, arg.Column2)
	return err
}

const getProgressForProfile = `-- name: getProgressForProfile :many
SELECT episode_id, progress
FROM "users"."progress"
WHERE profile_id = $1::uuid
  AND episode_id = ANY ($2::int[])
ORDER BY updated_at DESC
`

type getProgressForProfileParams struct {
	Column1 uuid.UUID `db:"column_1" json:"column1"`
	Column2 []int32   `db:"column_2" json:"column2"`
}

type getProgressForProfileRow struct {
	EpisodeID int32     `db:"episode_id" json:"episodeID"`
	Progress  time.Time `db:"progress" json:"progress"`
}

func (q *Queries) getProgressForProfile(ctx context.Context, arg getProgressForProfileParams) ([]getProgressForProfileRow, error) {
	rows, err := q.db.QueryContext(ctx, getProgressForProfile, arg.Column1, pq.Array(arg.Column2))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getProgressForProfileRow
	for rows.Next() {
		var i getProgressForProfileRow
		if err := rows.Scan(&i.EpisodeID, &i.Progress); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveProgress = `-- name: saveProgress :exec
INSERT INTO "users"."progress" (profile_id, episode_id, progress, updated_at)
VALUES ($1::uuid, $2::int, $3::time, NOW())
ON CONFLICT (profile_id, episode_id) DO UPDATE SET progress = EXCLUDED.progress
`

type saveProgressParams struct {
	Column1 uuid.UUID `db:"column_1" json:"column1"`
	Column2 int32     `db:"column_2" json:"column2"`
	Column3 time.Time `db:"column_3" json:"column3"`
}

func (q *Queries) saveProgress(ctx context.Context, arg saveProgressParams) error {
	_, err := q.db.ExecContext(ctx, saveProgress, arg.Column1, arg.Column2, arg.Column3)
	return err
}
